import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;


/*
    ðŸ”¹ List in Java:
       - List is an INTERFACE â†’ cannot be directly instantiated.
       - Common classes that implement List: ArrayList, LinkedList.
       - It represents an ordered collection of elements (index-based).
       - Duplicates are allowed.

    ðŸ”¹ Important List methods:
       add(value)        â†’ insert element at the end
       add(index, value) â†’ insert at specific position (shifts elements right)
       get(index)        â†’ access element
       set(index, value) â†’ update element
       remove(index)     â†’ delete element at index
       size()            â†’ number of elements

    âœ¨ Note on Method Overloading:
       - Same method name, different parameters.
       - Example: add(value) vs add(index, value).
       - Java picks the correct one based on arguments.
*/

public class Lists {

    public static void main(String [] args){

        // âœ… Best practice: use interface type on left side
        List<Integer> num = new ArrayList<>();
        System.out.println("Using ArrayList:");

        // Just switch here if you want LinkedList
        // List<Integer> num = new LinkedList<>();
        // System.out.println("Using LinkedList:");

        /*
            Why not write:
            ArrayList<Integer> num = new ArrayList<>();

            - Because coding to the INTERFACE (List) makes it flexible.
            - You can swap ArrayList â†’ LinkedList by changing just one line.
            - Rest of the code still works (since both implement List).
        */


        // ------------------- DEMO -------------------

        // add(value) â†’ append to end
        num.add(1);
        num.add(2);
        num.add(3);

        // add(index, value) â†’ insert at index
        num.add(1, 10);
        System.out.println("After insert: " + num); // [1, 10, 2, 3]

        // get(index) â†’ access element
        System.out.println("First element: " + num.get(0)); // 1

        // set(index, value) â†’ replace value at index
        num.set(2, 99);
        System.out.println("After set: " + num); // [1, 10, 99, 3]

        // remove(index) â†’ delete element
        num.remove(1);
        System.out.println("After remove: " + num); // [1, 99, 3]

        // size() â†’ total number of elements
        System.out.println("List size: " + num.size()); // 3



        /*
            ðŸ”¹ Why sometimes use:
               LinkedList<Integer> nums = new LinkedList<>();

            - LinkedList implements List (so it has all List methods).
            - BUT it also implements Deque (double-ended queue).
            - That gives it extra methods not present in List:

              addFirst(), addLast()
              getFirst(), getLast()
              removeFirst(), removeLast()
        */

        LinkedList<Integer> nums = new LinkedList<>();

        nums.add(1);
        nums.add(2);
        nums.add(3);

        nums.addFirst(0);  // insert at beginning
        nums.addLast(4);   // insert at end

        System.out.println("After addFirst() & addLast(): " + nums); // [0, 1, 2, 3, 4]

        System.out.println("First element: " + nums.getFirst()); // 0
        System.out.println("Last element: " + nums.getLast());   // 4

        nums.removeFirst();  // remove from beginning
        nums.removeLast();   // remove from end

        System.out.println("After removeFirst() & removeLast(): " + nums); // [1, 2, 3]
    }
}
